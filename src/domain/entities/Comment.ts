import { CommentStatus } from "../enums/CommentStatus";

export class Comment {
  constructor(
    public readonly id: string,
    public readonly content: string,
    public readonly authorId: string,
    public readonly blogPostId: string,
    public readonly parentId: string | undefined = undefined,
    public readonly status: CommentStatus = CommentStatus.PENDING,
    public readonly isActive: boolean = true,
    public readonly createdAt: Date = new Date(),
    public readonly updatedAt: Date = new Date()
  ) {}

  // ========== STATUS CHECK METHODS ==========
  public isApproved(): boolean {
    return this.status === CommentStatus.APPROVED && this.isActive;
  }

  public isPending(): boolean {
    return this.status === CommentStatus.PENDING && this.isActive;
  }

  public isRejected(): boolean {
    return this.status === CommentStatus.REJECTED;
  }

  public isReply(): boolean {
    return !!this.parentId;
  }

  public canBeEdited(): boolean {
    return this.isActive && this.status === CommentStatus.PENDING;
  }

  public canBeDeleted(): boolean {
    return this.isActive;
  }

  // ========== STATE TRANSITION METHODS ==========
  public approve(): Comment {
    if (this.status === CommentStatus.APPROVED) {
      throw new Error('Comment is already approved');
    }

    return new Comment(
      this.id,
      this.content,
      this.authorId,
      this.blogPostId,
      this.parentId,
      CommentStatus.APPROVED,
      this.isActive,
      this.createdAt,
      new Date() // Update timestamp on approval
    );
  }

  public reject(): Comment {
    if (this.status === CommentStatus.REJECTED) {
      throw new Error('Comment is already rejected');
    }

    return new Comment(
      this.id,
      this.content,
      this.authorId,
      this.blogPostId,
      this.parentId,
      CommentStatus.REJECTED,
      this.isActive,
      this.createdAt,
      new Date() // Update timestamp on rejection
    );
  }

  public updateContent(newContent: string): Comment {
    if (!this.canBeEdited()) {
      throw new Error('Comment cannot be edited in current state');
    }

    if (!newContent || newContent.trim().length < 10) {
      throw new Error('Comment content must be at least 10 characters long');
    }

    if (newContent.length > 1000) {
      throw new Error('Comment content cannot exceed 1000 characters');
    }

    return new Comment(
      this.id,
      newContent.trim(),
      this.authorId,
      this.blogPostId,
      this.parentId,
      CommentStatus.PENDING, // Reset to pending after edit
      this.isActive,
      this.createdAt,
      new Date()
    );
  }

  public deactivate(): Comment {
    return new Comment(
      this.id,
      this.content,
      this.authorId,
      this.blogPostId,
      this.parentId,
      this.status,
      false, // Mark as inactive
      this.createdAt,
      new Date()
    );
  }

  // ========== FACTORY METHODS ==========
  public static create(data: {
    content: string;
    authorId: string;
    blogPostId: string;
    parentId?: string;
  }): Comment {
    // Validation
    if (!data.content || data.content.trim().length < 10) {
      throw new Error('Comment content must be at least 10 characters long');
    }

    if (data.content.length > 1000) {
      throw new Error('Comment content cannot exceed 1000 characters');
    }

    if (!data.authorId || data.authorId.trim() === '') {
      throw new Error('Author ID is required');
    }

    if (!data.blogPostId || data.blogPostId.trim() === '') {
      throw new Error('Blog post ID is required');
    }

    const now = new Date();

    return new Comment(
      '', // ID will be generated by database
      data.content.trim(),
      data.authorId.trim(),
      data.blogPostId.trim(),
      data.parentId?.trim(),
      CommentStatus.PENDING,
      true,
      now,
      now
    );
  }

  public static fromDatabase(data: any): Comment {
    return new Comment(
      data.id,
      data.content,
      data.authorId,
      data.blogPostId,
      data.parentId,
      data.status,
      data.isActive,
      data.createdAt,
      data.updatedAt
    );
  }

  // ========== SERIALIZATION ==========
  public toPlainObject(): any {
    return {
      id: this.id,
      content: this.content,
      authorId: this.authorId,
      blogPostId: this.blogPostId,
      parentId: this.parentId,
      status: this.status,
      isActive: this.isActive,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
    };
  }

  // ========== VALIDATION ==========
  public validate(): string[] {
    const errors: string[] = [];

    if (!this.content || this.content.trim().length < 10) {
      errors.push('Comment content must be at least 10 characters long');
    }

    if (this.content && this.content.length > 1000) {
      errors.push('Comment content cannot exceed 1000 characters');
    }

    if (!this.authorId || this.authorId.trim() === '') {
      errors.push('Author ID is required');
    }

    if (!this.blogPostId || this.blogPostId.trim() === '') {
      errors.push('Blog post ID is required');
    }

    return errors;
  }

  public isValid(): boolean {
    return this.validate().length === 0;
  }
}