// schema.prisma - Düzeltilmiş versiyon

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String
  lastName  String
  password  String
  avatar    String?
  bio       String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blogPosts         BlogPost[]
  comments          Comment[]
  refreshTokens     RefreshToken[]
  blacklistedTokens TokenBlacklist[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  blogPosts BlogPost[]

  @@map("categories")
}

model BlogPost {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  excerpt       String?
  content       String
  featuredImage String?
  images        String[]
  tags          String[]
  status        PostStatus @default(DRAFT)
  viewCount     Int        @default(0)
  isPublished   Boolean    @default(false)
  publishedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Foreign Keys
  authorId   String
  categoryId String

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  comments Comment[]

  @@map("blog_posts")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Foreign Keys
  authorId   String
  blogPostId String
  parentId   String?

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blogPost BlogPost  @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  @@map("refresh_tokens")
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("token_blacklist")
}

// Enums
enum UserRole {
  ADMIN
  AUTHOR
  USER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}